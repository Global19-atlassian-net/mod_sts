# Enable or disable mod_sts in a particular Location/Directory or globally
# When not defined, the default value is "On".
#STSEnabled [On|Off]

# Set mode/protocol for calling the STS:
# "wstrust"       : WS-Trust
# "ropc"          : OAuth 2.0 Resource Owner Password Credentials grant
# "otx "          : OAuth 2.0 Token Exchange
# When not defined the default is "wstrust"
#STSMode [ wstrust | ropc | otx ]


#
# Common settings
#

# Enable or disable SSL server certificate validation for calls to the STS.
# When not defined the default is "On".
#STSSSLValidateServer [On|Off]

# Timeout for calls to the STS.
# When not defined the default is 20.
#STSHTTPTimeOut <seconds>

# Set the cache expiry for access tokens exchange results in seconds.
# When not defined, the default is: 300
#STSCacheExpiresIn <seconds>




#
# Source Token Settings
#

# Configure how the source token may be passed in; must be one or more of:
#
# "environment[:<name>]"             : from an Apache environment variable called <name>
#                                      <name> defaults to "OIDC_access_token"
# "header[:name=<name>&type=<type>]" : from an HTTP header called <name>
#                                      <name> defaults to the "Authorization" header
#                                      <type> is a type prefix string which defaults to "Bearer"
# "query[:<name>]"                   : from an HTTP query parameter called <name>
#                                      <name> defaults to "access_token"
# "post[:<name>]"                    : from an HTTP POST parameter called <name>
#                                      <name> defaults to "access_token"
# "cookie[:<name>]"                  : from an HTTP cookie called <name>
#                                      <name> defaults to "PA.global"
# Order of precedence is also as listed below, so if a source token is found in an environment 
# variable then the other configured presentation methods will be skipped.
# When not defined, the default is: "environment" "header"
#STSAcceptSourceTokenIn [ environment[:name=<name>] | header[:name=<name>&type=<type>] | query[:name=<name>] | post[:name=<name>] |cookie[:name=<name>] ]+

# Configure whether or not to strip the source token from the outgoing request.
# When not defined, the default is "On"
# Note that stripping the source token is not supported when it is consumed from POST parameters, i.e. STSAcceptSourceTokenIn includes "post"
#STSStripSourceToken [On|Off]

#
# Target Token Settings
#

# Configure how the target token may passed on; must be one or more of:
#
# "environment[:<name>]"             : in an Apache environment variable called <name>
#                                      <name> defaults to "MOD_STS_TARGET_TOKEN"
# "header[:name=<name>&type=<type>]" : in an HTTP header called <name>
#                                      <name> defaults to the "Authorization" header
#                                      <type> is a type prefix string which defaults to "Bearer"
# "query[:<name>]"                   : in an HTTP query parameter called <name>
#                                      <name> defaults to "access_token"
# "post[:<name>]"                    : in an HTTP POST parameter called <name>
#                                      <name> defaults to "access_token"
# "cookie[:<name>]"                  : in an HTTP cookie called <name>
#                                      <name> defaults to "sts_token"
# When not defined, the default is: "environment" "cookie"
#STSSetTargetTokenIn [ environment[:name=<name>] | header[:name=<name>&type=<type>] | query[:name=<name>] | post[:name=<name>] | cookie[:name=<name>] ]+


#
# WS-Trust Token Exchange protocol settings
#

# (Mandatory)
# Set the WS-Trust STS endpoint.
# When not defined, the default is: https://localhost:9031/pf/sts.wst
#STSWSTrustEndpoint <url>

# Set method that the module uses to authenticate to the WS-Trust STS endpoint.
#
# "basic:username=<username>&password=<password>" : using basic authentication
#                                                   <username> is the urlencoded username to use for basic auth
#                                                   <password> is the urlencoded password to use for basic auth
# "client_cert:cert=<cert_file>&key=<key_file>"   : using a client certificate
#                                                   <cert_file> is the path to the PEM encoded public certificate
#                                                               (can be relative to the Apache server root directory)
#                                                   <key_file>  is the path to the PEM encoded private key
#                                                               (can be relative to the Apache server root directory)
#
# When not defined the default is to not use any authentication mechanism.
#STSWSTrustEndpointAuth [ basic:username=<username>&password=<password> | client_cert:cert=<cert_file>&key=<key_file> ]

# (Mandatory)
# Set the WS-Trust AppliesTo value.
#STSWSTrustAppliesTo <string>

# (Optional)
# Set the WS-Trust Token Type value.
# When not defined the default is:
# http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
#STSWSTrustTokenType <string>

# (Optional)
# Set the WS-Trust Value Type value for BinarySecurity source tokens.
# Sample value for presenting OAuth 2.0 access tokens to a PingFederate server:
#   urn:pingidentity.com:oauth2:grant_type:validate_bearer
# When not defined the default is to not present the source token as a BinarySecurity token but
# to include it as a "verbatim" token e.g. a SAML 2.0 SAML 1.1 or even Username token
#STSWSTrustValueType <string>


#
# Resource Owner Password Credentials Token Exchange protocol settings
#

# (Mandatory)
# Set the OAuth 2.0 ROPC Token Endpoint.
#STSROPCEndpoint <url>

# Set method that the module uses to authenticate to the ROPC token endpoint.
# When not defined the default is to not use any authentication mechanism.
#
# "client_secret_basic:secret=<secret>"           : using basic authentication
#                                                   <secret> is the urlencoded client secret to use for basic auth
# "client_secret_post:secret=<secret>"            : using client_id/client_secret POST parameters
#                                                   <secret> is the urlencoded "client_secret" parameter value
# "client_secret_jwt:secret=<secret>&aud=<aud>"   : using a JWT signed with a symmetric key
#                                                   <secret> is the urlencoded symmetric key value
#                                                   <aud> is the urlencoded "aud" (i.e. audience) JWT claim value
# "private_key_jwt:jwk=<json>[&aud=<aud>]"        : using a JWT signed with a private key
#                                                   <json> is the urlencoded RSA JWK JSON document
#                                                   <aud> is the urlencoded "aud" (i.e. audience) JWT claim value
#                                                         when not defined the default is the endpoint
# "client_cert:cert=<cert_file>&key=<key_file>"   : using a client certificate
#                                                   <cert_file> is the path to the PEM encoded public certificate
#                                                               (can be relative to the Apache server root directory)
#                                                   <key_file>  is the path to the PEM encoded private key
#                                                               (can be relative to the Apache server root directory)
#
#STSROPCEndpointAuth [ client_secret_basic:secret=<secret>         |
                       client_secret_post:secret=<secret>          |
                       client_secret_jwt:secret=<secret>&aud=<aud> |
                       client_cert:cert=<cert_file>&key=<key_file>   ]

# (Mandatory)
# Set the Client ID for the OAuth 2.0 ROPC token request.
#STSROPCClientID <string>

# (Optional)
# Set the username to be used in the OAuth 2.0 ROPC token request
# When not defined the STSROPCClientID will be passed in the username.
#STSROPCUsername <string>

# (Optional)
# Set extra parameters added to the token exchange request. Sample value(s) are:
#   access_token_manager_id jwt
#   aud myresource
# This can be specified on a per-directory context.
# Multiple STSRequestParameter primitives can be used to configure multiple parameter key/value pairs.
# When not defined the default is not to add any additional parameters.
#
# Note: this parameter is shared across ROPC and OTX!
#STSRequestParameter <key> <value>


#
# OAuth 2.0 Token Exchange protocol settings
#

# (Mandatory)
# Set the OAuth 2.0 Token Exchange Endpoint.
#STSOTXEndpoint <url>

# Set method that the module uses to authenticate to the OAuth 2.0 Token Exchange endpoint.
# When not defined the default is to not use any authentication mechanism.
#
# "client_secret_basic:secret=<secret>"           : using basic authentication
#                                                   <secret> is the urlencoded client secret to use for basic auth
# "client_secret_post:secret=<secret>"            : using client_id/client_secret POST parameters
#                                                   <secret> is the urlencoded "client_secret" parameter value
# "client_secret_jwt:secret=<secret>&aud=<aud>"   : using a JWT signed with a symmetric key
#                                                   <secret> is the urlencoded symmetric key value
#                                                   <aud> is the urlencoded "aud" (i.e. audience) JWT claim value
# "private_key_jwt:jwk=<json>[&aud=<aud>]"        : using a JWT signed with a private key
#                                                   <json> is the urlencoded RSA JWK JSON document
#                                                   <aud> is the urlencoded "aud" (i.e. audience) JWT claim value
#                                                         when not defined the default is the endpoint
# "client_cert:cert=<cert_file>&key=<key_file>"   : using a client certificate
#                                                   <cert_file> is the path to the PEM encoded public certificate
#                                                               (can be relative to the Apache server root directory)
#                                                   <key_file>  is the path to the PEM encoded private key
#                                                               (can be relative to the Apache server root directory)
#
#STSOTXEndpointAuth [ client_secret_basic:secret=<secret>         |
                      client_secret_post:secret=<secret>          |
                      client_secret_jwt:secret=<secret>&aud=<aud> |
                      client_cert:cert=<cert_file>&key=<key_file>  ]

# Set the Client ID for the OAuth 2.0 Token Exchange request, used in the client authentication.
# When not defined, the default is to not use any client_id for client authentication.
#STSOTXClientID <string>

# Set extra parameters added to the token exchange request. Sample value(s) are:
#   audience myresource
#   scope "read write"
#   requested_token_type urn:ietf:params:oauth:token-type:saml2
#   subject_token_type bogustoken
#   parameterwithemptyvalue
# This can be specified on a per-directory context.
# Multiple STSRequestParameter primitives can be used to configure multiple parameter key/value pairs.
#
# When not defined the default for OAuth 2.0 Token Exchange is:
#   subject_token_type urn:ietf:params:oauth:token-type:access_token
# i.e. set the source token to an OAuth 2.0 access token
#
# Note: if you decide to set parameters for OTX remember to also include a subject_token_type value again
#       since it is required by the OAuth 2.0 Token Exchange specification.
# Note: this parameter is shared across ROPC and OTX!
#STSRequestParameter <key> <value>
