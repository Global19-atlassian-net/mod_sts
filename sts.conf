# Set mode/protocol for calling the STS:
# "wstrust"       : WS-Trust
# "ropc"          : OAuth 2.0 Resource Owner Password Credentials grant
# "otx "          : OAuth 2.0 Token Exchange
" "disabled"      : don't perform any attempt to exchange a token
# When not defined the default is "disabled"
#STSType [ wstrust | ropc | otx | disabled ]


#
# Common settings
#

# Enable or disable SSL server certificate validation for calls to the STS.
# When not defined the default is "On".
#STSSSLValidateServer [On|Off]

# Timeout for calls to the STS.
# When not defined the default is 20.
#STSHTTPTimeOut <seconds>

#
# Source Token Settings
#

# Configure how the source token may be passed in; must be one of:
#
# environment [name=<name>]        : from an Apache environment variable called <name>
#                                    <name> defaults to "access_token"
# header [name=<name>&type=<type>] : from an HTTP header called <name>
#                                    <name> defaults to the "Authorization" header
#                                    <type> is a type prefix string which defaults to "Bearer"
# query [name=<name>]              : from an HTTP query parameter called <name>
#                                    <name> defaults to "access_token"
# post [name=<name>]               : from an HTTP POST parameter called <name>
#                                    <name> defaults to "access_token"
# cookie [name=<name>]             : from an HTTP cookie called <name>
#                                    <name> defaults to "access_token"
#
# Multiple primitives can be specified in order of processing i.e the token will be obtained by the first method that
# returns a token. When not defined, the default is: "environment" "header"
#
#STSAcceptSourceTokenIn [ environment [name=<name>] | header [name=<name>&type=<type>] | query [name=<name>] | post [name=<name>] |cookie [name=<name>] ]

#
# Target Token Settings
#

# Configure how the target token may passed on; must be one of:
#
# environment [<name>]"             : in an Apache environment variable called <name>
#                                     <name> defaults to "MOD_STS_TARGET_TOKEN"
# header [name=<name>&type=<type>]" : in an HTTP header called <name>
#                                     <name> defaults to the "Authorization" header
#                                     <type> is a type prefix string which defaults to "Bearer"
# query [<name>]"                   : in an HTTP query parameter called <name>
#                                     <name> defaults to "access_token"
# post [<name>]"                    : in an HTTP POST parameter called <name>
#                                     <name> defaults to "access_token"
# cookie [<name>]"                  : in an HTTP cookie called <name>
#                                     <name> defaults to "sts_token"
3
# Multiple primitives can be specified to pass a token in multiple ways.
# When not defined, the default is: "environment" "cookie"
#
#STSPassTargetTokenIn [ environment [name=<name>] | header [name=<name>&type=<type>] | query [name=<name>] | post [name=<name>] | cookie [name=<name>] ]


#
# WS-Trust Token Exchange protocol settings
#

# (Mandatory)
# Set the WS-Trust STS endpoint.
# When not defined, the default is: https://localhost:9031/pf/sts.wst
#STSWSTrustEndpoint <url>

# Set the method that the module uses to authenticate to the WS-Trust STS endpoint.
#
# none                                                    no authentication towards the endpoint is used
# client_secret_basic      client_id, client_secret       OIDC client secret basic authentication, URL-encoded values in HTTP Basic Authentication
# client_secret_post       client_id, client_secret       OIDC client secret post based authentication, values in HTTP POST parameters
# client_secret_jwt        client_id, client_secret, aud  OIDC client secret JWT, providing a symmetric key in the client_secret value
# private_key_jwt          client_id, jwk, aud            OIDC private key JWT, providing a JWK in escaped JSON string representation
# client_cert              cert, key                      TLS Client Certificate authentication, providing paths to PEM-formatted files
# basic                    username,password              HTTP basic authentication
#
# When not defined the default is "none".
#
#STSWSTrustEndpointAuth [ basic username=<username>&password=<password> | client_cert cert=<cert_file>&key=<key_file> ]

# (Mandatory)
# Set the WS-Trust AppliesTo value.
#STSWSTrustAppliesTo <string>

# (Optional)
# Set the WS-Trust Token Type value.
# When not defined the default is:
# http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
#STSWSTrustTokenType <string>

# (Optional)
# Set the WS-Trust Value Type value for BinarySecurity source tokens.
# Sample value for presenting OAuth 2.0 access tokens to a PingFederate server:
#   urn:pingidentity.com:oauth2:grant_type:validate_bearer
# When not defined the default is to not present the source token as a BinarySecurity token but
# to include it as a "verbatim" token e.g. a SAML 2.0 SAML 1.1 or even Username token
#STSWSTrustValueType <string>


#
# OAuth 2.0 Resource Owner Password Credentials Token Exchange protocol settings
#

# (Mandatory)
# Set the OAuth 2.0 ROPC Token Endpoint.
#STSROPCEndpoint <url>

# Set the method that the module uses to authenticate to the ROPC token endpoint.
#
# none                                                    no authentication towards the endpoint is used
# client_secret_basic      client_id, client_secret       OIDC client secret basic authentication, URL-encoded values in HTTP Basic Authentication
# client_secret_post       client_id, client_secret       OIDC client secret post based authentication, values in HTTP POST parameters
# client_secret_jwt        client_id, client_secret, aud  OIDC client secret JWT, providing a symmetric key in the client_secret value
# private_key_jwt          client_id, jwk, aud            OIDC private key JWT, providing a JWK in escaped JSON string representation
# client_cert              cert, key                      TLS Client Certificate authentication, providing paths to PEM-formatted files
# basic                    username,password              HTTP basic authentication
#
# When not defined the default is "none".
#
#STSROPCEndpointAuth [ client_secret_basic client_id=<client_id>&client_secret=<client_secret>           |
#                      client_secret_post  client_id=<client_id>&client_secret=<client_secret>           |
#                      client_secret_jwt   client_id=<client_id>&client_secret=<client_secret>&aud=<aud> |
#                      private_key_jwt     client_id=<client_id>&jwk=<json>&aud=<aud>                    |
#                      client_cert         cert=<cert_file>&key=<key_file>                               |
#                      basic               username=<username>&password=<password> ]

# (Mandatory)
# Set the Client ID for the OAuth 2.0 ROPC token request.
#STSROPCClientID <string>

# (Optional)
# Set the username to be used in the OAuth 2.0 ROPC token request
# When not defined the STSROPCClientID will be passed in the username.
#STSROPCUsername <string>

# (Optional)
# Set extra parameters added to the token exchange request. Sample value(s) are:
#   access_token_manager_id jwt
#   aud myresource
# This can be specified on a per-directory context.
# Multiple STSRequestParameter primitives can be used to configure multiple parameter key/value pairs.
# When not defined the default is not to add any additional parameters.
#
# Note: this parameter is shared across ROPC and OTX!
#STSRequestParameter <key> [<value>]


#
# OAuth 2.0 Token Exchange protocol settings
#

# (Mandatory)
# Set the OAuth 2.0 Token Exchange Endpoint.
#STSOTXEndpoint <url>

# Set the method that the module uses to authenticate to the OAuth 2.0 Token Exchange endpoint.
#
# When not defined the default is to not use any authentication mechanism.
#
# none                                                    no authentication towards the endpoint is used
# client_secret_basic      client_id, client_secret       OIDC client secret basic authentication, URL-encoded values in HTTP Basic Authentication
# client_secret_post       client_id, client_secret       OIDC client secret post based authentication, values in HTTP POST parameters
# client_secret_jwt        client_id, client_secret, aud  OIDC client secret JWT, providing a symmetric key in the client_secret value
# private_key_jwt          client_id, jwk, aud            OIDC private key JWT, providing a JWK in escaped JSON string representation
# client_cert              cert, key                      TLS Client Certificate authentication, providing paths to PEM-formatted files
# basic                    username,password              HTTP basic authentication
#
#STSOTXEndpointAuth [ client_secret_basic client_id=<client_id>&client_secret=<client_secret>           |
#                     client_secret_post  client_id=<client_id>&client_secret=<client_secret>           |
#                     client_secret_jwt   client_id=<client_id>&client_secret=<client_secret>&aud=<aud> |
#                     private_key_jwt     client_id=<client_id>&jwk=<json>&aud=<aud>                    |
#                     client_cert         cert=<cert_file>&key=<key_file>                               |
#                     basic               username=<username>&password=<password> ]

# Set the Client ID for the OAuth 2.0 Token Exchange request, used in the client authentication.
# When not defined, the default is to not use any client_id for client authentication.
#STSOTXClientID <string>

# Set extra parameters added to the token exchange request. Sample value(s) are:
#   audience myresource
#   scope "read write"
#   requested_token_type urn:ietf:params:oauth:token-type:saml2
#   subject_token_type bogustoken
#   parameterwithemptyvalue
# This can be specified on a per-directory context.
# Multiple STSRequestParameter primitives can be used to configure multiple parameter key/value pairs.
#
# When not defined the default for OAuth 2.0 Token Exchange is:
#   subject_token_type urn:ietf:params:oauth:token-type:access_token
# i.e. set the source token to an OAuth 2.0 access token
#
# Note: if you decide to set parameters for OTX remember to also include a subject_token_type value again
#       since it is required by the OAuth 2.0 Token Exchange specification.
# Note: this parameter is shared across ROPC and OTX!
#STSRequestParameter <key> <value>

# Cache settings.
#
# Set the cache expiry for access tokens exchange results in seconds.
# When not defined, the default is: 300
#STSCacheExpiresIn <seconds>

# Set the cache type and options.
#
# When not defined the default is "shm".
#
# <type>                   <options> (default)            <description>
#
# generic:
#
# key_hash_algo            <string> (sha256)              hash algorithm for the cache key (or "none")       
# encrypt                  true|false (true)              encrypt the cache value (default is "false" for the shm cache backend)
# passphrase               <string> (auto-generated)      password used as the symmetric encryption key for cache values 
# passphrase_hash_algo     <string> (sha256)              hash algorithm to apply to the passphrase before using it as an encryption key
#
# shm:
#
# max_key_size             <number> (65)                  maximum size of the cache key in bytes (see also: key_hash_algo)
# max_val_size             <number> (8193)                maximum size of a single cache value
# max_entries              <number> (1000)                maximum number of entries in the cache (FIFO policy, overruns will result in a warning in the log)
#
# file:
#
# dir                      <path> (/tmp or C:\\Temp)      cache file directory
# clean_interval           <seconds> (60)                 minimum interval to loop over the cache directories looking to delete expired entries
#
# memcache:
#
# config_string            <string> (--SERVER=localhost)  memcached specific server configuration string, see: https://www.systutorials.com/docs/linux/man/3-memcached/
#
# redis:
#
# host                     <string> (localhost)           Redis server hostname
# port                     <number> (6379)                Redis servver port
# password                 <string> (<no authentication>) password used to authenticate to the Redis server
#
#
#STSCache <type> <options>

